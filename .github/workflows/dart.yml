name: iOS-simulator-build

on:
  workflow_dispatch:

jobs:
  build-ios-simulator:
    name: ðŸŽ‰ iOS Simulator Build
    runs-on: macos-latest
    steps:
      # 1. Checkout el cÃ³digo fuente
      - uses: actions/checkout@v3

      # 2. Instalar Flutter en el canal estable
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      # 3. Obtener las dependencias de Flutter
      - run: flutter pub get
      
      # 4. Actualizar repositorio de CocoaPods
      - run: pod repo update
        working-directory: ios

      # 5. Compilar el proyecto iOS para simulador sin firma de cÃ³digo
      - run: flutter build ios --simulator --no-codesign

      # 6. Crear la estructura Payload para el archivo .zip
      - run: mkdir Payload
        working-directory: build/ios/iphonesimulator
      - run: mv Runner.app Payload/
        working-directory: build/ios/iphonesimulator
      
      # 7. Comprimir el bundle .app en un archivo .zip para Appetize.io
      - name: Create App Bundle (.zip)
        run: zip -r RunnerSimulatorBundle.zip Payload/
        working-directory: build/ios/iphonesimulator

      # 8. Compilar el proyecto iOS como .ipa (opcional)
      - name: Create IPA
        run: |
          mkdir Payload
          mv build/ios/iphoneos/Runner.app Payload/
          zip -r FlutterIpaExport.ipa Payload/
        working-directory: build/ios/iphoneos
      
      # 9. Crear o actualizar un Release en GitHub con artefactos
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/ios/iphonesimulator/RunnerSimulatorBundle.zip
            build/ios/iphoneos/FlutterIpaExport.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
